spring:
  profiles:
    active: dev

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_HOST}
    username: ${DB_NAME}
    password: ${DB_PASSWORD}

  jpa:
    open-in-view: true
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 1000
        jdbc.batch_size: 1000
        dialect: com.rocket.config.querydsl.CustomMySQL8InnoDBDialect
    database: mysql

  redis:
    port: ${REDIS_PORT}
    host: ${REDIS_HOST}
    password: ${REDIS_PASSWORD}

  # Security OAuth
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLE_CLIENT_ID}
            clientSecret:  ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          kakao:
            clientId: ${KAKAO_CLIENT_ID}
            clientSecret: ${KAKAO_CLIENT_SECRET}
            clientAuthenticationMethod: post
            authorizationGrantType: authorization_code
            redirectUri: ${KAKAO_REDIRECT_URI_LOCAL}
            scope:
              - profile_image
              - account_email
            clientName: Kakao
          naver:
            clientId: ${NAVER_CLIENT_ID}
            clientSecret: ${NAVER_CLIENT_SECRET}
            clientAuthenticationMethod: post
            authorizationGrantType: authorization_code
            redirectUri: ${NAVER_REDIRECT_URI_LOCAL}
            scope:
              - name
              - email
              - profile_image
            clientName: Naver

        provider:
          kakao:
            authorizationUri: https://kauth.kakao.com/oauth/authorize
            tokenUri: https://kauth.kakao.com/oauth/token
            userInfoUri: https://kapi.kakao.com/v2/user/me
            userNameAttribute: id
          naver:
            authorizationUri: https://nid.naver.com/oauth2.0/authorize
            tokenUri: https://nid.naver.com/oauth2.0/token
            userInfoUri: https://openapi.naver.com/v1/nid/me
            userNameAttribute: response

cors:
  allowed-origins: 'http://localhost:3000'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
  allowed-headers: '*'
  max-age: 3600

jwt.secret: ${JWT_SECRET}

app:
  auth:
    tokenSecret: ${TOKEN_SECRET}
    tokenExpiry: 1800000 #30min
    refreshTokenExpiry: 604800000 #7day
  oauth2:
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect

cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    s3:
      bucket: ${S3_BUCKET}
    region:
      static: ap-northeast-2
      auto: false
    stack:
      auto: false

property:
  s3-base-url: ${S3_BASIC_KEY}

logging:
  level:
    org.hibernate.SQL: debug
    com.amazonaws.util.EC2MetadataUtils: ERROR